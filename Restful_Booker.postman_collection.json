{
	"info": {
		"_postman_id": "921ff34b-cd24-43e9-9687-af83aaf6f045",
		"name": "Restful Booker",
		"description": "## Overview\nThe Restful Booker API is a sample API based on hotel bookings. The API contains endpoints to demonstrate CRUD operations. The source code can be obtained from https://github.com/mwinteringham/restful-booker\n\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Get Auth Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.globals.set(\"my_booker_token\", pm.response.json().token);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"password123\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/auth",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth"
							]
						},
						"description": "Get auth token"
					},
					"response": []
				}
			]
		},
		{
			"name": "Bookings",
			"item": [
				{
					"name": "Get Bookings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => pm.expect(responseCode.code).to.equal(200));",
									"",
									"var body = JSON.parse(responseBody);",
									"",
									"var count = body.length;",
									"",
									"pm.test(\"Verify response contains list of \" + count + \" bookings\", function () {",
									"",
									"    pm.expect(pm.response.json().length).to.eql(count);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/booking",
							"host": [
								"{{url}}"
							],
							"path": [
								"booking"
							]
						},
						"description": "Get a list of all bookings"
					},
					"response": []
				},
				{
					"name": "Create new Booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"",
									"",
									"pm.test(\"Verify Created Booking is not Empty\", () => pm.expect(jsonData.booking).to.not.eql(\"\"));",
									"",
									"",
									"",
									"pm.test(\"Verify if Created booking is added in Database \", function () {",
									"",
									"     pm.expect(pm.response.text()).to.include(\"bookingid\");",
									"",
									"     }); ",
									"",
									"",
									"",
									"pm.globals.set(\"bookingID\", pm.response.json().bookingid);",
									"",
									"pm.test(\"Check and All Variables and Values of new Booking\", function () {",
									"",
									"    pm.expect(jsonData.booking.firstname).to.eql(\"Samantha\");",
									"",
									"    pm.expect(jsonData.booking.lastname).to.eql(\"Pearl\");",
									"",
									"    pm.expect(jsonData.booking.totalprice).to.eql(115);",
									"",
									"    pm.expect(jsonData.booking.depositpaid).to.eql(true);",
									"",
									"    pm.expect(jsonData.booking.bookingdates.checkin).to.eql(\"2020-03-06\");",
									"",
									"    pm.expect(jsonData.booking.bookingdates.checkout).to.eql(\"2020-03-09\");",
									"",
									"    pm.expect(jsonData.booking.additionalneeds).to.eql(\"Breakfast\");",
									"",
									"});     ",
									"",
									"",
									"",
									"pm.globals.set(\"bookingID\", pm.response.json().bookingid);",
									"",
									"",
									"",
									"",
									"/*pm.test(\"Status Code is 200\", () => pm.expect(responseCode.code).to.equal(200));",
									"",
									"pm.test(\"FirstName : \" , () => pm.expect(jsonData.booking.firstname).to.equal(\"Samantha\"));",
									"",
									"pm.test(\"LastName : \" , () => pm.expect(jsonData.booking.lastname).to.equal(\"Pearl\"));",
									"",
									"pm.test(\"Total Price : \", () => pm.expect(jsonData.booking.totalprice).to.equal(115));",
									"",
									"pm.test(\"Deposite paid : \", ()=> pm.expect(jsonData.booking.depositpaid).to.equal(true));",
									"",
									"pm.test(\"Checkin Date : \", () => pm.expect(jsonData.booking.bookingdates.checkin).to.equal(\"2020-03-06\"));",
									"",
									"pm.test(\"CheckOut Date : \", () => pm.expect(jsonData.booking.bookingdates.checkout).to.equal(\"2020-03-09\"));",
									"",
									"pm.test(\"Additional Needs :\", () => pm.expect(jsonData.booking.additionalneeds).to.equal(\"Breakfast\"));",
									"",
									"*/",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n  \"firstname\" : \"Samantha\",\r\n\r\n  \"lastname\" : \"Pearl\",\r\n\r\n  \"totalprice\" : 115,\r\n\r\n  \"depositpaid\" : true,\r\n\r\n  \"additionalneeds\" : \"Breakfast\",\r\n\r\n  \"bookingdates\" : {\r\n\r\n    \"checkin\" : \"2020-03-06\",\r\n\r\n    \"checkout\" : \"2020-03-09\"\r\n\r\n  }\r\n\r\n}"
						},
						"url": {
							"raw": "{{url}}/booking",
							"host": [
								"{{url}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Booking by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.globals.get(\"bookingID\", pm.response.json().bookingid);\r",
									"pm.test(\"Verify that the booking is not empty\", function () {\r",
									"    pm.expect(jsonData.booking).to.not.eql(\"\");\r",
									"});\r",
									"pm.test(\"Check the contents of Booking Data are not empty\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.include(null);\r",
									"});\r",
									"pm.test(\"Status code is 200\", () => pm.expect(responseCode.code).to.equal(200) );"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/booking/{{bookingID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"booking",
								"{{bookingID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Booking (partial)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*var status_code = 200;",
									"pm.test(\"Status code is \" + status_code, function () {",
									"    pm.response.to.have.status(status_code);",
									"});",
									"",
									"pm.test(\"Booking is updated\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Jim\");",
									"});*/",
									"",
									"pm.test(\"Booking is updated\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"James\",\"Bond\",115,true,\"2020-03-06\",\"2020-03-09\",\"Breakfast and lunch\");",
									"});",
									"pm.test(\"Status code is 200\", () => pm.expect(responseCode.code).to.equal(200) );"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"type": "text",
								"value": "token={{my_booker_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\" : \"Bond\",\r\n    \"additionalneeds\" : \"Breakfast and lunch\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/booking/{{bookingID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"booking",
								"{{bookingID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*var status_code = 200;\r",
									"pm.test(\"Status code is \" + status_code, function () {\r",
									"    pm.response.to.have.status(status_code);\r",
									"});\r",
									"\r",
									"pm.test(\"Booking is updated\", function () {\r",
									"\r",
									"    pm.expect(pm.response.text()).to.include(\"James\");\r",
									"\r",
									"});*/\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.globals.get(\"bookingID\", pm.response.json().bookingid);\r",
									"pm.globals.set(\"bookingID\", pm.response.json().bookingid);\r",
									"pm.test(\"Check Updated firstname and Checkin date\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Jimmy\");\r",
									"    pm.expect(pm.response.text()).to.include(\"2020-03-06\");\r",
									"});\r",
									"pm.test(\"Status code is 200\", () => pm.expect(responseCode.code).to.equal(200) );"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": "token={{my_booker_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n\r\n    \"firstname\" : \"Jimmy\",\r\n\r\n    \"lastname\" : \"Brown\",\r\n\r\n    \"totalprice\" : 111,\r\n\r\n    \"depositpaid\" : true,\r\n\r\n    \"bookingdates\" : {\r\n\r\n        \"checkin\" : \"2020-03-06\",\r\n\r\n        \"checkout\" : \"2020-03-09\"\r\n\r\n    },\r\n\r\n    \"additionalneeds\" : \"Breakfast and dinner\"\r\n\r\n}"
						},
						"url": {
							"raw": "{{url}}/booking/{{bookingID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"booking",
								"{{bookingID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new Booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"",
									"",
									"pm.test(\"Verify Created Booking is not Empty\", () => pm.expect(jsonData.booking).to.not.eql(\"\"));",
									"",
									"",
									"",
									"pm.test(\"Verify if Created booking is added in Database \", function () {",
									"",
									"     pm.expect(pm.response.text()).to.include(\"bookingid\");",
									"",
									"     }); ",
									"",
									"",
									"",
									"pm.globals.set(\"bookingID\", pm.response.json().bookingid);",
									"",
									"pm.test(\"Check and All Variables and Values of new Booking\", function () {",
									"",
									"    pm.expect(jsonData.booking.firstname).to.eql(\"Samantha\");",
									"",
									"    pm.expect(jsonData.booking.lastname).to.eql(\"Pearl\");",
									"",
									"    pm.expect(jsonData.booking.totalprice).to.eql(115);",
									"",
									"    pm.expect(jsonData.booking.depositpaid).to.eql(true);",
									"",
									"    pm.expect(jsonData.booking.bookingdates.checkin).to.eql(\"2020-03-06\");",
									"",
									"    pm.expect(jsonData.booking.bookingdates.checkout).to.eql(\"2020-03-09\");",
									"",
									"    pm.expect(jsonData.booking.additionalneeds).to.eql(\"Breakfast\");",
									"",
									"});     ",
									"",
									"",
									"",
									"pm.globals.set(\"bookingID\", pm.response.json().bookingid);",
									"",
									"",
									"",
									"",
									"/*pm.test(\"Status Code is 200\", () => pm.expect(responseCode.code).to.equal(200));",
									"",
									"pm.test(\"FirstName : \" , () => pm.expect(jsonData.booking.firstname).to.equal(\"Samantha\"));",
									"",
									"pm.test(\"LastName : \" , () => pm.expect(jsonData.booking.lastname).to.equal(\"Pearl\"));",
									"",
									"pm.test(\"Total Price : \", () => pm.expect(jsonData.booking.totalprice).to.equal(115));",
									"",
									"pm.test(\"Deposite paid : \", ()=> pm.expect(jsonData.booking.depositpaid).to.equal(true));",
									"",
									"pm.test(\"Checkin Date : \", () => pm.expect(jsonData.booking.bookingdates.checkin).to.equal(\"2020-03-06\"));",
									"",
									"pm.test(\"CheckOut Date : \", () => pm.expect(jsonData.booking.bookingdates.checkout).to.equal(\"2020-03-09\"));",
									"",
									"pm.test(\"Additional Needs :\", () => pm.expect(jsonData.booking.additionalneeds).to.equal(\"Breakfast\"));",
									"",
									"*/",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n  \"firstname\" : \"Samantha\",\r\n\r\n  \"lastname\" : \"Pearl\",\r\n\r\n  \"totalprice\" : 115,\r\n\r\n  \"depositpaid\" : true,\r\n\r\n  \"additionalneeds\" : \"Breakfast\",\r\n\r\n  \"bookingdates\" : {\r\n\r\n    \"checkin\" : \"2020-03-06\",\r\n\r\n    \"checkout\" : \"2020-03-09\"\r\n\r\n  }\r\n\r\n}"
						},
						"url": {
							"raw": "{{url}}/booking",
							"host": [
								"{{url}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var status_code = 201;",
									"pm.test(\"Status code is \" + status_code, function () {",
									"    pm.response.to.have.status(status_code);",
									"});",
									"",
									"var url = pm.environment.get(\"url\") + \"/booking/\" +  pm.globals.get(\"bookingID\");",
									"",
									"const getRequest = {",
									"        url: url,",
									"        method: 'GET'",
									"};",
									"",
									"pm.sendRequest(getRequest, function (err, res) {",
									"    if (err) { ",
									"        console.log(err);",
									"    }",
									"    ",
									"    console.log(res);",
									"    ",
									"    pm.test('Response should be Not Found', function () {",
									"        pm.expect(res.status).to.include(\"Not Found\");",
									"    });",
									"    ",
									"    pm.test(\"Response code 404\", function() {",
									"        pm.expect(res.code).to.equal(404);",
									"    })",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Cookie",
								"value": "token={{my_booker_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/booking/{{bookingID}}?=",
							"host": [
								"{{url}}"
							],
							"path": [
								"booking",
								"{{bookingID}}"
							],
							"query": [
								{
									"key": "",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "All bookings requests "
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}